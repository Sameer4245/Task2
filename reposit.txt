#include <iostream>
#include <vector>
#include <string>
using namespace std;

#define MPIN 1234

class BankAccount {
private:
    int accountNumber;
    string owner;
    double balance;

public:
    BankAccount(int accountNumber, string owner) {
        this->accountNumber = accountNumber;
        this->owner = owner;
        this->balance = 0.0;
    }

    int getAccountNumber() { return accountNumber; }
    string getOwner() { return owner; }
    double getBalance() { return balance; }

    void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            cout << "$" << amount << " deposited. New balance: $" << balance << endl;
        } else {
            cout << "Deposit amount must be positive." << endl;
        }
    }

    void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            cout << "$" << amount << " withdrawn. New balance: $" << balance << endl;
        } else if (amount <= 0) {
            cout << "Withdrawal amount must be positive." << endl;
        } else {
            cout << "Insufficient balance for this withdrawal." << endl;
        }
    }

    void transfer(BankAccount &receiver, double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            receiver.deposit(amount);
            cout << "$" << amount << " transferred to " << receiver.getOwner() << ". Your new balance: $" << balance << endl;
        } else if (amount <= 0) {
            cout << "Transfer amount must be positive." << endl;
        } else {
            cout << "Insufficient balance for this transfer." << endl;
        }
    }
};

class Bank {
private:
    vector<BankAccount> accounts;

public:
    void createAccount(int accountNumber, string owner) {
        BankAccount newAccount(accountNumber, owner);
        accounts.push_back(newAccount);
        cout << "Account created successfully for " << owner << " with account number " << accountNumber << endl;
    }

    BankAccount* findAccount(int accountNumber) {
        for (auto &account : accounts) {
            if (account.getAccountNumber() == accountNumber) {
                return &account;
            }
        }
        cout << "Account not found!" << endl;
        return nullptr;
    }
};

bool authenticate(int &langChoice) {
    int attempts = 3;
    while (attempts > 0) {
        string inputMPIN;
        cout << "Enter your 4-digit MPIN: ";
        cin >> inputMPIN;

        if (inputMPIN.length() == 4 && stoi(inputMPIN) == MPIN) {
            cout << "\nWelcome to the Banking System!\n";
            cout << "Access Granted!\n";
            cout << "\nSelect your preferred language:\n";
            cout << "1. English\n";
            cout << "2. Hindi\n";
            cout << "Enter your choice: ";
            cin >> langChoice;
            if (langChoice == 1) {
                cout << "You have selected English.\n";
            } else if (langChoice == 2) {
                cout << "\u0906\u092A\u0928\u0947 \u0939\u093F\u0902\u0926\u0940 \u091A\u0941\u0928\u0940 \u0939\u0948\u0964\n";
            } else {
                cout << "Invalid choice. Defaulting to English.\n";
                langChoice = 1;
            }
            return true;
        } else {
            attempts--;
            cout << "Incorrect MPIN. Attempts left: " << attempts << endl;
            if (attempts == 0) {
                cout << "Access Denied!" << endl;
                return false;
            }
        }
    }
    return false;
}

void checkCreditScore() {
    cout << "\nEnter your credit score: ";
    int creditScore;
    cin >> creditScore;

    if (creditScore > 750) {
        cout << "You have a good credit score!" << endl;
        cout << "\nEnter your annual income: ";
        double income;
        cin >> income;

        if (income < 300000) {
            cout << "Sorry sir, better luck next time." << endl;
            return;
        }

        cout << "Enter your age: ";
        int age;
        cin >> age;
cout << "Choose number of months for repayment (12, 24, 36, 48, 60): ";
        int months;
        cin >> months;

        cout << "\nEnter the name of your nominee: ";
        string nominee;
        cin.ignore();
        getline(cin, nominee);

        cout << "\nLoan application submitted for review with nominee " << nominee << "!\n";
    } else {
        cout << "Your credit score is less. Improve your credit score." << endl;
    }
}

int main() {
    int langChoice;
    if (!authenticate(langChoice)) {
        return 0;
    }

    Bank bank;

    while (true) {
        if (langChoice == 1) {
            cout << "\n==== Bank System Menu ====\n";
            cout << "1. Create Account\n";
            cout << "2. Deposit Funds\n";
            cout << "3. Withdraw Funds\n";
            cout << "4. Transfer Funds\n";
            cout << "5. Check Credit Score\n";
            cout << "6. Exit\n";
        } else {
            cout << "\n==== \u092C\u0948\u0902\u0915 \u092A\u094D\u0930\u0923\u093E\u0932\u0940 \u092E\u0947\u0928\u0942 ====\n";
            cout << "1. \u0916\u093E\u0924\u093E \u092C\u0928\u093E\u090F\u0902\n";
            cout << "2. \u0927\u0928 \u091C\u092E\u093E \u0915\u0930\u0947\u0902\n";
            cout << "3. \u0927\u0928 \u0928\u093F\u0915\u093E\u0932\u0947\u0902\n";
            cout << "4. \u0927\u0928 \u0938\u094D\u0925\u093E\u0928\u093E\u0902\u0924\u0930\u093F\u0924 \u0915\u0930\u0947\u0902\n";
            cout << "5. \u0915\u094D\u0930\u0947\u0921\u093F\u091F \u0938\u094D\u0915\u094B\u0930 \u0926\u0947\u0916\u0947\u0902\n";
            cout << "6. \u092C\u093E\u0939\u0930 \u0928\u093F\u0915\u0932\u0947\u0902\n";
        }

        cout << "Enter your choice: ";
        int choice;
        cin >> choice;

        if (choice == 1) {
            cout << "Enter account number: ";
            int accNum;
            cin >> accNum;

            cout << "Enter owner name: ";
            string owner;
            cin.ignore();
            getline(cin, owner);

            bank.createAccount(accNum, owner);
        } else if (choice == 2) {
            cout << "Enter account number: ";
            int accNum;
            cin >> accNum;

            BankAccount* account = bank.findAccount(accNum);
            if (account) {
                cout << "Enter deposit amount: ";
                double amount;
                cin >> amount;
                account->deposit(amount);
            }
        } else if (choice == 3) {
            cout << "Enter account number: ";
            int accNum;
            cin >> accNum;

            BankAccount* account = bank.findAccount(accNum);
            if (account) {
                cout << "Enter withdrawal amount: ";
                double amount;
                cin >> amount;
                account->withdraw(amount);
            }
        } else if (choice == 4) {
            cout << "Enter your account number: ";
            int senderAccNum;
            cin >> senderAccNum;

            BankAccount* senderAccount = bank.findAccount(senderAccNum);
            if (senderAccount) {
                cout << "Enter receiver's account number: ";
                int receiverAccNum;
                cin >> receiverAccNum;

                BankAccount* receiverAccount = bank.findAccount(receiverAccNum);
                if (receiverAccount) {
                    cout << "Enter transfer amount: ";
                    double amount;
                    cin >> amount;
                    senderAccount->transfer(*receiverAccount, amount);
                }
            }
        } else if (choice == 5) {
            checkCreditScore();
        } else if (choice == 6) {
            cout << "Thank you for using the banking system. Goodbye!" << endl;
            break;
        } else {
            cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}